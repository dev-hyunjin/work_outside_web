<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.app.work.mapper.member.MemberMapper">
	<!--로그인 처리-->
	<select id="login" resultType="int">
		SELECT count(member_number) member_number
		from tbl_member
		where (member_id = #{memberId} and member_password = #{memberPassword}) and (member_use = 'Y' or member_use = 'V')
	</select>

	<select id="sessionMember" resultType="int">
		select member_number
		from tbl_member
		where (member_id = #{memberId} and member_password = #{memberPassword}) and (member_use = 'Y' or member_use = 'V')
	</select>

	<!--세션 번호로 정보 가져오기-->
	<select id="selectMember" resultType="memberVO">
		select member_number, member_id, member_password, member_name, member_rank, dept_number, team_number , member_use
		from tbl_member
		where member_number = #{sessionNumber}
	</select>

	<select id="selectMemberListWithoutAdmin" resultType="memberDTO">
		select member_number, member_id, member_password, member_name, member_rank, member_use, dept_number, team_number
		from tbl_member
		where not member_rank = '관리자'
		<if test='teamNumber != null and !teamNumber.equals("")'>
			and team_number = #{teamNumber}
		</if>
		order by member_name collate "ko_KR.utf8"
	</select>

	<!--사원 조회-->
	<select id="selectMemberListWithPaging" resultType="memberVO">
		select member_number, member_id, member_password, member_name, member_rank, member_use, tm.dept_number, tt.team_number, td.dept_name, tt.team_name
		from tbl_member tm
		join tbl_dept td
		on tm.dept_number = td.dept_number
		join tbl_team tt
		on tm.team_number = tt.team_number
		<where>
			<if test='deptNumber != null and deptNumber !=""'>
				and tm.dept_number = #{deptNumber}
			</if>
			<if test='teamNumber != null and !teamNumber.equals("")'>
				and tm.team_number = #{teamNumber}
			</if>
			<if test='memberName != null and memberName != ""'>
				and member_name like concat('%', #{memberName}, '%')
			</if>
			<if test='memberUse != null and memberUse == "Y"'>
				and member_use = #{memberUse}
			</if>
		</where>
		order by member_number limit #{criteria.amount} offset #{criteria.skip}
	</select>

	<select id="countMemberForPaging" resultType="int">
		select count(member_number)
		from tbl_member
		<where>
			<if test='deptNumber != null and deptNumber != ""'>
				and dept_number = #{deptNumber}
			</if>
			<if test='teamNumber != null and !teamNumber.equals("")'>
				and team_number = #{teamNumber}
			</if>
			<if test='memberName != null and memberName != ""'>
				and member_name like concat('%', #{memberName}, '%')
			</if>
			<if test='memberUse != null and memberUse == "Y"'>
				and member_use = #{memberUse}
			</if>
		</where>
	</select>

	<insert id="insertMember">
		insert into tbl_member
		(member_id, member_password, member_name, member_rank, dept_number, team_number)
		values (#{memberId}, #{memberPassword}, #{memberName}, #{memberRank}, #{deptNumber}, #{teamNumber})
	</insert>

	<update id="updateMember">
		update tbl_member
		set member_id = #{memberId}, member_name = #{memberName},
		    member_rank = #{memberRank}, dept_number = #{deptNumber}, team_number = #{teamNumber}
		<if test='memberPassword != null and memberPassword != ""'>
			, member_password = #{memberPassword}
		</if>
		where member_number = #{memberNumber}
	</update>

	<update id="deleteMemberUse">
		update tbl_member
		set member_use = #{memberUse}, dept_number = 0, team_number = 0
		where member_number = #{memberNumber}
	</update>

	<update id="updateDeptAndTeamForDeleteDept">
		update tbl_member
		set dept_number = 0, team_number = 0
		where dept_number = #{deptNumber}
	</update>

	<update id="updateTeamForDeleteTeam">
		update tbl_member
		set team_number = 0
		where team_number = #{teamNumber}
	</update>

</mapper>